{"version":3,"sources":["components/DashboardEmbed/DashboardEmbed.jsx","App.js","index.js"],"names":["DashboardEmbed","useState","dashboard","setDashboard","setupDashboard","embedCtrRef","useEffect","el","LookerEmbedSDK","init","createDashboardWithId","appendTo","build","connect","then","ComponentsProvider","Layout","hasAside","height","Section","px","Box","py","Button","onClick","run","width","ref","App","id","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAgBaA,EAAiB,WAC1B,MAAkCC,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAiB,SAACF,GACpBC,EAAaD,IASTG,EAAcC,qBAClB,SAACC,GAEOC,iBAAeC,KAAK,yBAA0B,SAChCD,iBAAeE,sBAAsB,GAChDC,SAASJ,GAETK,QACAC,UACAC,KAAKV,KAGhB,IAGJ,OACI,cAACW,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,UAAQ,EAACC,OAAO,OAAxB,SACE,cAACC,EAAA,EAAD,CAASD,OAAO,OAAOE,GAAG,QAA1B,SACE,qCACE,cAACC,EAAA,EAAD,CAAKC,GAAG,MAAR,SAEI,cAACC,EAAA,EAAD,CACEC,QA7BG,WACbtB,GACFA,EAAUuB,OA0BA,6BAMJ,qBAAKC,MAAM,OAAOC,IAAKtB,cCzCxBuB,MAbf,WACE,OACA,gCACE,mDACA,qBAAKC,GAAG,YAAR,SACI,cAAC,EAAD,MAEJ,mBAAGC,KAAK,sCAAR,6ECLJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8a811732.chunk.js","sourcesContent":["import { LookerEmbedSDK } from '@looker/embed-sdk'\nimport React, { useEffect, useState} from 'react'\n\n\n\nimport {\n    Button,\n    Layout,\n    Page,\n    Section,\n    Space,\n    Box,\n    ComponentsProvider\n  } from '@looker/components'\n\n\nexport const DashboardEmbed = () => {\n    const [dashboard, setDashboard] = useState()\n\n    const setupDashboard = (dashboard) => {\n        setDashboard(dashboard)\n      }\n\n    const runDashboard = () => {\n        if (dashboard) {\n          dashboard.run()\n        }\n      }\n\n      const embedCtrRef = useEffect(\n        (el) => {\n                //el.innerHTML = \"\"\n                LookerEmbedSDK.init('dev.looker.loppdev.com', \"/auth\")\n                const embed = LookerEmbedSDK.createDashboardWithId(1)\n                  .appendTo(el)\n                embed\n                  .build()\n                  .connect()\n                  .then(setupDashboard)\n              \n        },\n        []\n      )\n\n    return (\n        <ComponentsProvider>\n          <Layout hasAside height=\"100%\">\n            <Section height=\"100%\" px=\"small\">\n              <>\n                <Box py=\"5px\">\n                  \n                    <Button\n                      onClick={runDashboard}\n                    >\n                      Run Dashboard\n                    </Button>\n                </Box>\n                <div width=\"100%\" ref={embedCtrRef} />\n              </>\n            </Section>\n          </Layout>\n        </ComponentsProvider>\n      )\n}","import './App.css';\nimport {DashboardEmbed} from './components/DashboardEmbed'\n\nfunction App() {\n  return (\n  <div>\n    <h1>\"The Snow Report\"</h1>\n    <div id=\"dashboard\">\n        <DashboardEmbed />\n    </div>\n    <a href=\"https://github.com/slopp/embed-snow\">Information on Data Pipeline, Architecture, and Source Code</a>\n  </div>\n   \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}